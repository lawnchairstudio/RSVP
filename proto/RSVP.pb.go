// Code generated by protoc-gen-go.
// source: RSVP.proto
// DO NOT EDIT!

/*
Package proto is a generated protocol buffer package.

It is generated from these files:
	RSVP.proto

It has these top-level messages:
	Invitee
	InviteeRequest
*/
package proto

import proto1 "github.com/golang/protobuf/proto"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto1.Marshal
var _ = math.Inf

type Invitee struct {
	InviteeId        *string `protobuf:"bytes,1,req" json:"InviteeId,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *Invitee) Reset()         { *m = Invitee{} }
func (m *Invitee) String() string { return proto1.CompactTextString(m) }
func (*Invitee) ProtoMessage()    {}

func (m *Invitee) GetInviteeId() string {
	if m != nil && m.InviteeId != nil {
		return *m.InviteeId
	}
	return ""
}

type InviteeRequest struct {
	Id               *string `protobuf:"bytes,1,req,name=id" json:"id,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *InviteeRequest) Reset()         { *m = InviteeRequest{} }
func (m *InviteeRequest) String() string { return proto1.CompactTextString(m) }
func (*InviteeRequest) ProtoMessage()    {}

func (m *InviteeRequest) GetId() string {
	if m != nil && m.Id != nil {
		return *m.Id
	}
	return ""
}

// Client API for RSVP service

type RSVPClient interface {
	// Obtains an invitee based on the id
	GetInvitee(ctx context.Context, in *InviteeRequest, opts ...grpc.CallOption) (*Invitee, error)
}

type rSVPClient struct {
	cc *grpc.ClientConn
}

func NewRSVPClient(cc *grpc.ClientConn) RSVPClient {
	return &rSVPClient{cc}
}

func (c *rSVPClient) GetInvitee(ctx context.Context, in *InviteeRequest, opts ...grpc.CallOption) (*Invitee, error) {
	out := new(Invitee)
	err := grpc.Invoke(ctx, "/proto.RSVP/GetInvitee", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for RSVP service

type RSVPServer interface {
	// Obtains an invitee based on the id
	GetInvitee(context.Context, *InviteeRequest) (*Invitee, error)
}

func RegisterRSVPServer(s *grpc.Server, srv RSVPServer) {
	s.RegisterService(&_RSVP_serviceDesc, srv)
}

func _RSVP_GetInvitee_Handler(srv interface{}, ctx context.Context, codec grpc.Codec, buf []byte) (interface{}, error) {
	in := new(InviteeRequest)
	if err := codec.Unmarshal(buf, in); err != nil {
		return nil, err
	}
	out, err := srv.(RSVPServer).GetInvitee(ctx, in)
	if err != nil {
		return nil, err
	}
	return out, nil
}

var _RSVP_serviceDesc = grpc.ServiceDesc{
	ServiceName: "proto.RSVP",
	HandlerType: (*RSVPServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetInvitee",
			Handler:    _RSVP_GetInvitee_Handler,
		},
	},
	Streams: []grpc.StreamDesc{},
}
